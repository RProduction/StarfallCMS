{"version":3,"sources":["components/DialogCustomForm.js","components/DialogCustom.js","../node_modules/@material-ui/icons/esm/Add.js","components/ProjectDialog.js","components/Project.js"],"names":["DialogCustomForm","props","request","btn","category","_props$values","values","name","newName","confirmName","errors","touched","handleChange","isValid","setFieldTouched","change","e","persist","react_default","a","createElement","Grid","container","component","spacing","onSubmit","preventDefault","TextField","item","xs","id","label","onChange","bind","value","helperText","error","Boolean","Fragment","Button","type","disabled","size","addSchema","Yup","required","matches","message","excludeEmptyString","min","max","deleteSchema","oneOf","renameSchema","initialAdd","initialDelete","targetName","initialRename","DialogCustom","title","content","dialogProps","Dialog","DialogTitle","DialogContent","DialogContentText","formik_esm","validationSchema","initialValues","render","propsRender","components_DialogCustomForm","Object","assign","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_utils_createSvgIcon__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","d","ProjectAuthorized","dispatch","useDispatch","target","useSelector","state","dialogType","dialog","notification","open","ADD_DIALOG","onClose","HideDialog","_ref2","asyncToGenerator","regenerator_default","mark","_callee","_ref","wrap","_context","prev","next","Axios","post","concat","ShowNotificationDialog","t0","stop","_x","apply","this","arguments","DELETE_DIALOG","_ref4","_callee2","_ref3","_context2","delete","_x2","RENAME_DIALOG","_ref6","_callee3","_ref5","_context3","_x3","HideNotificationDialog","columns","field","searchable","hidden","export","rowData","projectName","react_router_dom","style","color","to","Project","project","match","params","select","useMemo","selectEntitiesInProjectByName","entities","_useState","useState","_useState2","slicedToArray","datas","setDatas","useEffect","map","index","#","createdAt","created","updatedAt","updated","ProjectDialog","dist_default","data","actions","icon","Create","tooltip","onClick","SetTarget","ShowRenameDialog","DeleteForever","ShowDeleteDialog","Add","isFreeAction","ShowAddDialog","icons","Search","ResetSearch","Clear","FirstPage","PreviousPage","ArrowBack","NextPage","ArrowForward","LastPage","options","pageSize","pageSizeOptions","search","actionsColumnIndex"],"mappings":"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","file":"static/js/16.80fddadb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {TextField, Button, Grid} from '@material-ui/core';\r\n\r\nfunction DialogCustomForm(props){\r\n    const {\r\n        request, \r\n        btn,\r\n        category,\r\n\t\tvalues: { name, newName, confirmName },\r\n\t\terrors,\r\n\t\ttouched,\r\n\t\thandleChange,\r\n\t\tisValid,\r\n\t\tsetFieldTouched\r\n    } = props;\r\n    \r\n    const change = (name, e) => {\r\n\t\te.persist();\r\n\t\thandleChange(e);\r\n\t\tsetFieldTouched(name, true, false);\r\n    };\r\n\r\n\treturn(\r\n        <Grid container component=\"form\" spacing={1}\r\n            onSubmit={(e)=>{\r\n                e.preventDefault();\r\n                request({ \r\n                    name: name, \r\n                    newName: newName, \r\n                    confirmName: confirmName \r\n                });\r\n            }}\r\n        >\r\n            {category === 'add' \r\n                ? <Grid component={TextField} item xs={12}\r\n                    id=\"name\" name=\"name\" label=\"Name\"\r\n                    onChange={change.bind(null, \"name\")}\r\n                    value={name}\r\n                    helperText={touched.name ? errors.name : \"\"}\r\n                    error={touched.name && Boolean(errors.name)}\r\n                /> : category === 'delete'\r\n                ? <Grid component={TextField} item xs={12}\r\n                    id=\"confirmName\" name=\"confirmName\" label=\"Confirm Name\"\r\n                    onChange={change.bind(null, \"confirmName\")}\r\n                    value={confirmName}\r\n                    helperText={touched.confirmName ? errors.confirmName : \"\"}\r\n                    error={touched.confirmName && Boolean(errors.confirmName)}\r\n                /> : category === 'rename'\r\n                ? <React.Fragment>\r\n                    <Grid component={TextField} item xs={12}\r\n                        id=\"newName\" name=\"newName\" label=\"New Name\"\r\n                        onChange={change.bind(null, \"newName\")}\r\n                        value={newName}\r\n                        helperText={touched.newName ? errors.newName : \"\"}\r\n                        error={touched.newName && Boolean(errors.newName)}\r\n                    />\r\n                    <Grid component={TextField} item xs={12}\r\n                        id=\"confirmName\" name=\"confirmName\" label=\"Confirm Name\"\r\n                        onChange={change.bind(null, \"confirmName\")}\r\n                        value={confirmName}\r\n                        helperText={touched.confirmName ? errors.confirmName : \"\"}\r\n                        error={touched.confirmName && Boolean(errors.confirmName)}\r\n                    />\r\n                </React.Fragment> : null\r\n            }\r\n            <Grid item xs={12} component={Button} \r\n                type=\"submit\" disabled={!isValid}\r\n                size=\"large\"\r\n            >\r\n                {btn}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default DialogCustomForm;","import React from 'react';\r\nimport {Dialog, DialogTitle, DialogContent, DialogContentText} from '@material-ui/core';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport DialogCustomForm from './DialogCustomForm';\r\n\r\nconst addSchema = Yup.object({\r\n\tname: Yup.string().required('enter name')\r\n\t.matches(/^[a-zA-Z0-9_]+$/, {\r\n\t\tmessage: 'input letters, numbers, and underscore only',\r\n\t\texcludeEmptyString: true,\r\n\t}).min(1, 'name too short').max(50, 'name too long')\r\n});\r\n\r\nconst deleteSchema = Yup.object({\r\n    name: Yup.string(),\r\n\tconfirmName: Yup.string().required('re-enter name')\r\n\t.matches(/^[a-z0-9_]*$/i, {\r\n\t\tmessage: 'input letters, numbers, and underscore only',\r\n\t\texcludeEmptyString: true,\r\n\t}).oneOf([Yup.ref('name')], \"Confirm Name does not match\")\r\n});\r\n\r\nconst renameSchema = Yup.object({\r\n    name: Yup.string(),\r\n\tconfirmName: Yup.string().required('re-enter name')\r\n\t.oneOf([Yup.ref('name')], \"Confirm Name does not match\"),\r\n    newName: Yup.string().required('enter new name')\r\n\t.matches(/^[a-zA-Z0-9_]+$/, {\r\n\t\tmessage: 'input letters, numbers, and underscore only',\r\n\t\texcludeEmptyString: true,\r\n    }).min(1, 'new name too short').max(50, 'new name too long')\r\n});\r\n\r\nconst initialAdd = {\r\n    name: ''\r\n};\r\n\r\nconst initialDelete = targetName => ({\r\n    name: targetName,\r\n    confirmName: ''\r\n});\r\n\r\nconst initialRename = targetName => ({\r\n    name: targetName,\r\n    confirmName: '',\r\n    newName: ''\r\n});\r\n\r\n// will accept parameter of request, title, content, btn, targetName, and dialogProps\r\nfunction DialogCustom(props){\r\n    const {title, content, targetName, category, dialogProps} = props;\r\n\r\n    return(\r\n        <Dialog {...dialogProps}>\r\n            <DialogTitle id='dialog-title'>\r\n                {title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {category === 'add' || category === 'delete' || category === 'rename' \r\n                    ? <React.Fragment>\r\n                        {category === 'delete' \r\n                            ?   <React.Fragment>\r\n                                    <DialogContentText>\r\n                                        {content}\r\n                                    </DialogContentText>\r\n                                    <DialogContentText>\r\n                                        Please type in the name of the target to confirm\r\n                                    </DialogContentText>\r\n                                </React.Fragment>\r\n                            : null\r\n                        }\r\n                        <Formik \r\n                            validationSchema={category === 'add'\r\n                                ? addSchema : category === 'rename'\r\n                                ? renameSchema : category === 'delete'\r\n                                ? deleteSchema : {}\r\n                            }\r\n                            initialValues={category === 'add'\r\n                                ? initialAdd : category === 'rename'\r\n                                ? initialRename(targetName) : category === 'delete'\r\n                                ? initialDelete(targetName) : {}\r\n                            }\r\n                            render={(propsRender)=><DialogCustomForm \r\n                                {...props}\r\n                                {...propsRender}\r\n                            />}\r\n                        />\r\n                    </React.Fragment> : category === 'notification'\r\n                    ? <DialogContentText>\r\n                        {content}\r\n                    </DialogContentText> : null\r\n                }\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nDialogCustom.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    content: PropTypes.string,\r\n    btn: PropTypes.string,\r\n    targetName: PropTypes.string,\r\n    category: PropTypes.oneOf(['add', 'delete', 'rename', 'notification']).isRequired,\r\n    request: PropTypes.func,\r\n    dialogProps: PropTypes.shape({\r\n        ...Dialog.propTypes\r\n    }).isRequired\r\n}\r\n\r\nexport default DialogCustom;","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport { ADD_DIALOG, DELETE_DIALOG, RENAME_DIALOG, HideDialog\r\n    , ShowNotificationDialog, HideNotificationDialog} from '../redux/actions/globalActions';\r\nimport DialogCustom from './DialogCustom';\r\nimport Axios from '../Axios';\r\n\r\nfunction ProjectAuthorized(props){\r\n    const dispatch = useDispatch();\r\n    const target = useSelector(state => state.target);\r\n    const dialogType = useSelector(state => state.dialog);\r\n    const notification = useSelector(state => state.notification);\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <DialogCustom\r\n                dialogProps={{\r\n                    open: dialogType === ADD_DIALOG,\r\n                    onClose: () => dispatch(HideDialog())\r\n                }}\r\n                category=\"add\"\r\n                title=\"Add New Entity\"\r\n                btn=\"Add New Entity\"\r\n                request={async({name})=>{\r\n                    try{\r\n                        await Axios.post(`entity/${target.id}`, {\r\n                            name: name\r\n                        });\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Add New Entity ${name}`, \r\n                            `Succeed adding new entity ${name}`\r\n                        ));\r\n                    }catch(err){\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Add New Entity ${name}`, \r\n                            `Fail adding new entity ${name}, error: ${err}`\r\n                        ));\r\n                    }\r\n                }}\r\n            />\r\n            <DialogCustom\r\n                dialogProps={{\r\n                    open: dialogType === DELETE_DIALOG,\r\n                    onClose: () => dispatch(HideDialog())\r\n                }}\r\n                category=\"delete\"\r\n                title={`PERMANENTLY DELETE \"${target.name}\"`}\r\n                btn={`PERMANENTLY DELETE \"${target.name}\"`}\r\n                content={`This action will PERMANENTLY DELETE \"${target.name}\". Proceed with caution!`}\r\n                targetName={target.name}\r\n                request={async({name})=>{\r\n                    try{\r\n                        await Axios.delete(`entity/${target.id}`);\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Delete Entity ${name}`, \r\n                            `Succeed deleting entity ${name}`\r\n                        ));\r\n                    }catch(err){\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Delete Entity ${name}`, \r\n                            `Fail deleting entity ${name}, error: ${err}`\r\n                        ));\r\n                    }\r\n                }}\r\n            />\r\n            <DialogCustom\r\n                dialogProps={{\r\n                    open: dialogType === RENAME_DIALOG,\r\n                    onClose: () => dispatch(HideDialog())\r\n                }}\r\n                category=\"rename\"\r\n                title={`Rename \"${target.name}\"`}\r\n                btn={`Rename \"${target.name}\"`}\r\n                targetName={target.name}\r\n                request={async({name, newName})=>{\r\n                    try{\r\n                        await Axios.post(`entity/${target.id}/rename`, {\r\n                            name: newName\r\n                        });\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Rename Entity ${name}`, \r\n                            `Succeed renaming entity ${name} into ${newName}`\r\n                        ));\r\n                    }catch(err){\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Rename Entity ${name}`, \r\n                            `Fail renaming entity ${name} into ${newName}, error: ${err}`\r\n                        ));\r\n                    }\r\n                }}\r\n            />\r\n            <DialogCustom\r\n                category=\"notification\"\r\n                title={notification.title} \r\n                content={notification.content}\r\n                dialogProps={{\r\n                    open: notification.title !== '' && notification.content !== '',\r\n                    onClose: ()=>dispatch(HideNotificationDialog())\r\n                }}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ProjectAuthorized;","import React, {useState, useEffect, useMemo} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport MaterialTable from 'material-table';\r\nimport {Search, Clear, ArrowForward, ArrowBack, FirstPage, LastPage, DeleteForever, Create, Add} from '@material-ui/icons';\r\nimport {Link} from 'react-router-dom';\r\nimport {selectEntitiesInProjectByName} from '../redux/selectors/entitySelectors';\r\n\r\nimport {ShowAddDialog, ShowDeleteDialog, ShowRenameDialog\r\n    , SetTarget} from '../redux/actions/globalActions';\r\n\r\nimport ProjectDialog from './ProjectDialog';\r\n\r\nconst columns = [\r\n    {\r\n        title: \"#\", \r\n        field: \"#\", \r\n        searchable: false\r\n    },\r\n    {\r\n        field: \"id\", \r\n        searchable: false, \r\n        hidden: true, \r\n        export: false\r\n    },\r\n    {\r\n        field: \"projectName\", \r\n        searchable: false, \r\n        hidden: true, \r\n        export: false\r\n    },\r\n    {\r\n        title: \"Name\", \r\n        field: \"name\", \r\n        searchable: true, \r\n        render: (rowData)=>{\r\n            const {name, projectName} = rowData;\r\n            return(\r\n                <Link style={{color: 'black'}} to={`/${projectName}/${name}`}>\r\n                    {name}\r\n                </Link>\r\n            )\r\n        }\r\n    },\r\n    {\r\n        title: \"Created At\", \r\n        field: \"createdAt\", \r\n        searchable: false,\r\n        type: 'datetime'\r\n    },\r\n    {   \r\n        title: \"Updated At\", \r\n        field: \"updatedAt\", \r\n        searchable: false,\r\n        type: 'datetime'\r\n    }\r\n]\r\n\r\n// fetch authStatus from redux store and setAuthorized(true) if creator or manager\r\n// Any actions in Project will affect Entity and need Creator or Manager level Authorization\r\nfunction Project(props){\r\n    const dispatch = useDispatch();\r\n    const {project} = props.match.params;\r\n\r\n    const select = useMemo(selectEntitiesInProjectByName, []);\r\n    const entities = useSelector(state => select(state, project));\r\n\r\n    const [datas, setDatas] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        setDatas(entities.entities.map((value, index) => ({\r\n            \"#\": (index+1),\r\n            id: value.id,\r\n            projectName: project,\r\n            name: value.name,\r\n            createdAt: value.created,\r\n            updatedAt: value.updated\r\n        })));\r\n    }, [entities]);\r\n\r\n    // view all entities within project and their attribute\r\n    // entity id\r\n    // entity name\r\n    // entity last modified\r\n    // how many items\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <ProjectDialog/>\r\n            <MaterialTable \r\n                title=\"Entities\" \r\n                columns={columns} \r\n                data={datas}\r\n                actions={[\r\n                    {\r\n                        icon: ()=><Create/>, \r\n                        tooltip: \"Rename Entity\", \r\n                        onClick: (e, rowData)=>{\r\n                            const {id, name} = rowData;\r\n                            dispatch(SetTarget({id: id, name: name}));\r\n                            dispatch(ShowRenameDialog());\r\n                        }\r\n                    },\r\n                    {\r\n                        icon: ()=><DeleteForever/>, \r\n                        tooltip: \"Delete Entity\",\r\n                        onClick: (e, rowData)=>{\r\n                            const {id, name} = rowData;\r\n                            dispatch(SetTarget({id: id, name: name}));\r\n                            dispatch(ShowDeleteDialog());\r\n                        }\r\n                    },\r\n                    {\r\n                        icon: ()=><Add/>,\r\n                        tooltip: \"Add Entity\",\r\n                        isFreeAction: true,\r\n                        onClick: (e)=>{\r\n                            dispatch(SetTarget({id: entities.project.id}));\r\n                            dispatch(ShowAddDialog());\r\n                        }\r\n                    }\r\n                ]}\r\n                icons={{\r\n                    Search: Search,\r\n                    ResetSearch: Clear,\r\n                    FirstPage: FirstPage,\r\n                    PreviousPage: ArrowBack,\r\n                    NextPage: ArrowForward,\r\n                    LastPage: LastPage\r\n                }}\r\n                options={{\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10,25,50],\r\n                    search: true,\r\n                    actionsColumnIndex: -1\r\n                }}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Project;"],"sourceRoot":""}