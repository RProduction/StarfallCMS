{"version":3,"sources":["components/DialogCustomForm.js","components/DialogCustom.js","components/OverviewPopover.js","components/DialogImg.js","components/OverviewAuthorized.js"],"names":["DialogCustomForm","props","request","btn","category","_props$values","values","name","newName","confirmName","errors","touched","handleChange","isValid","setFieldTouched","change","e","persist","react_default","a","createElement","Grid","container","component","spacing","onSubmit","preventDefault","TextField","item","xs","id","label","onChange","bind","value","helperText","error","Boolean","Fragment","Button","type","disabled","size","addSchema","Yup","required","matches","message","excludeEmptyString","min","max","deleteSchema","oneOf","renameSchema","initialAdd","initialDelete","targetName","initialRename","DialogCustom","title","content","dialogProps","Dialog","DialogTitle","DialogContent","DialogContentText","formik_esm","validationSchema","initialValues","render","propsRender","components_DialogCustomForm","Object","assign","OverviewPopover","dispatch","useDispatch","anchor","useSelector","state","projectPopover","PopoverMenu","open","onClose","SetProjectPopover","anchorEl","menus","icon","Create","onClick","ShowRenameDialog","Image","ShowImgDialog","DeleteForever","ShowDeleteDialog","maxSize","formats","Form","imgRequest","imgCategory","onSucceed","onFail","_useState","useState","_useState2","slicedToArray","img","setImg","_useState3","_useState4","setError","_imgReq","asyncToGenerator","regenerator_default","mark","_callee","formdata","res","wrap","_context","prev","next","FormData","append","split","pop","Axios","post","Content-Type","sent","t0","stop","apply","this","arguments","useEffect","includes","imgReq","target","files","concat","DialogImg","other","objectWithoutProperties","FAB","React","forwardRef","ref","Fab","innerRef","color","OverviewAuthorized","dialogType","dialog","notification","ADD_DIALOG","HideDialog","_ref2","_ref","ShowNotificationDialog","_x","DELETE_DIALOG","_ref4","_callee2","_ref3","_context2","delete","_x2","RENAME_DIALOG","_ref6","_callee3","_ref5","_context3","_x3","components_DialogImg","IMG_DIALOG","err","HideNotificationDialog","components_OverviewPopover","Box","position","bottom","right","zIndex","ShowAddDialog","Add"],"mappings":"uMA2EeA,MAxEf,SAA0BC,GAAM,IAExBC,EASAD,EATAC,QACAC,EAQAF,EARAE,IACAC,EAOAH,EAPAG,SAJwBC,EAWxBJ,EANNK,OAAUC,EALoBF,EAKpBE,KAAMC,EALcH,EAKdG,QAASC,EALKJ,EAKLI,YACzBC,EAKMT,EALNS,OACAC,EAIMV,EAJNU,QACAC,EAGMX,EAHNW,aACAC,EAEMZ,EAFNY,QACAC,EACMb,EADNa,gBAGQC,EAAS,SAACR,EAAMS,GACxBA,EAAEC,UACFL,EAAaI,GACbF,EAAgBP,GAAM,GAAM,IAG7B,OACOW,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,QAAS,EACtCC,SAAU,SAACT,GACPA,EAAEU,iBACFxB,EAAQ,CACJK,KAAMA,EACNC,QAASA,EACTC,YAAaA,MAIP,QAAbL,EACKc,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAME,UAAWI,IAAWC,MAAI,EAACC,GAAI,GACnCC,GAAG,OAAOvB,KAAK,OAAOwB,MAAM,OAC5BC,SAAUjB,EAAOkB,KAAK,KAAM,QAC5BC,MAAO3B,EACP4B,WAAYxB,EAAQJ,KAAOG,EAAOH,KAAO,GACzC6B,MAAOzB,EAAQJ,MAAQ8B,QAAQ3B,EAAOH,QACxB,WAAbH,EACHc,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAME,UAAWI,IAAWC,MAAI,EAACC,GAAI,GACnCC,GAAG,cAAcvB,KAAK,cAAcwB,MAAM,eAC1CC,SAAUjB,EAAOkB,KAAK,KAAM,eAC5BC,MAAOzB,EACP0B,WAAYxB,EAAQF,YAAcC,EAAOD,YAAc,GACvD2B,MAAOzB,EAAQF,aAAe4B,QAAQ3B,EAAOD,eAC/B,WAAbL,EACHc,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACEpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAME,UAAWI,IAAWC,MAAI,EAACC,GAAI,GACjCC,GAAG,UAAUvB,KAAK,UAAUwB,MAAM,WAClCC,SAAUjB,EAAOkB,KAAK,KAAM,WAC5BC,MAAO1B,EACP2B,WAAYxB,EAAQH,QAAUE,EAAOF,QAAU,GAC/C4B,MAAOzB,EAAQH,SAAW6B,QAAQ3B,EAAOF,WAE7CU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAME,UAAWI,IAAWC,MAAI,EAACC,GAAI,GACjCC,GAAG,cAAcvB,KAAK,cAAcwB,MAAM,eAC1CC,SAAUjB,EAAOkB,KAAK,KAAM,eAC5BC,MAAOzB,EACP0B,WAAYxB,EAAQF,YAAcC,EAAOD,YAAc,GACvD2B,MAAOzB,EAAQF,aAAe4B,QAAQ3B,EAAOD,gBAEjC,KAExBS,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,GAAIN,UAAWgB,IAC1BC,KAAK,SAASC,UAAW5B,EACzB6B,KAAK,SAEJvC,KC9DXwC,EAAYC,SAAW,CAC5BrC,KAAMqC,WAAaC,SAAS,cAC3BC,QAAQ,kBAAmB,CAC3BC,QAAS,8CACTC,oBAAoB,IAClBC,IAAI,EAAG,kBAAkBC,IAAI,GAAI,mBAG/BC,EAAeP,SAAW,CAC5BrC,KAAMqC,WACTnC,YAAamC,WAAaC,SAAS,iBAClCC,QAAQ,gBAAiB,CACzBC,QAAS,8CACTC,oBAAoB,IAClBI,MAAM,CAACR,MAAQ,SAAU,iCAGvBS,EAAeT,SAAW,CAC5BrC,KAAMqC,WACTnC,YAAamC,WAAaC,SAAS,iBAClCO,MAAM,CAACR,MAAQ,SAAU,+BACvBpC,QAASoC,WAAaC,SAAS,kBACjCC,QAAQ,kBAAmB,CAC3BC,QAAS,8CACTC,oBAAoB,IACfC,IAAI,EAAG,sBAAsBC,IAAI,GAAI,uBAGtCI,EAAa,CACf/C,KAAM,IAGJgD,EAAgB,SAAAC,GAAU,MAAK,CACjCjD,KAAMiD,EACN/C,YAAa,KAGXgD,EAAgB,SAAAD,GAAU,MAAK,CACjCjD,KAAMiD,EACN/C,YAAa,GACbD,QAAS,KAgEEkD,UA5Df,SAAsBzD,GAAM,IACjB0D,EAAqD1D,EAArD0D,MAAOC,EAA8C3D,EAA9C2D,QAASJ,EAAqCvD,EAArCuD,WAAYpD,EAAyBH,EAAzBG,SAAUyD,EAAe5D,EAAf4D,YAE7C,OACI3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAWD,EACR3C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAajC,GAAG,gBACX6B,GAELzC,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACkB,QAAb5D,GAAmC,WAAbA,GAAsC,WAAbA,EAC1Cc,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACgB,WAAblC,EACOc,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACIpB,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACKL,GAEL1C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,0DAIN,KAEN/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CACIC,iBAA+B,QAAb/D,EACZuC,EAAyB,WAAbvC,EACZiD,EAA4B,WAAbjD,EACf+C,EAAe,GAErBiB,cAA4B,QAAbhE,EACTkD,EAA0B,WAAblD,EACbqD,EAAcD,GAA2B,WAAbpD,EAC5BmD,EAAcC,GAAc,GAElCa,OAAQ,SAACC,GAAD,OAAepD,EAAAC,EAAAC,cAACmD,EAADC,OAAAC,OAAA,GACfxE,EACAqE,QAGiB,iBAAblE,EAClBc,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACGL,GACkB,sLC7C5Bc,MAxCf,SAAyBzE,GACrB,IAAM0E,EAAWC,cACXC,EAASC,YAAY,SAAAC,GAAK,OAAEA,EAAMC,iBAExC,OACI9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACInD,GAAI+C,EAAS,eAAiB,KAC9BK,OAAML,EACNM,QAAS,kBAAMR,EAASS,YAAkB,QAC1CC,SAAUR,EACVS,MAAO,CACH,CACI3B,MAAO,SACP4B,KAAMC,IACNC,QAAS,WACLd,EAASS,YAAkB,OAC3BT,EAASe,iBAGjB,CACI/B,MAAO,eACP4B,KAAMI,IACNF,QAAS,WACLd,EAASS,YAAkB,OAC3BT,EAASiB,iBAGjB,CACIjC,MAAO,SACP4B,KAAMM,IACNJ,QAAS,WACLd,EAASS,YAAkB,OAC3BT,EAASmB,6GClC3BC,EAAU,SACVC,EAAU,CACZ,YACA,aACA,aAGJ,SAASC,EAAKhG,GAAM,IAEZiG,EAIAjG,EAJAiG,WACAC,EAGAlG,EAHAkG,YACAC,EAEAnG,EAFAmG,UACAC,EACApG,EADAoG,OALYC,EAQMC,qBARNC,EAAAhC,OAAAiC,EAAA,EAAAjC,CAAA8B,EAAA,GAQTI,EARSF,EAAA,GAQJG,EARIH,EAAA,GAAAI,EASUL,qBATVM,EAAArC,OAAAiC,EAAA,EAAAjC,CAAAoC,EAAA,GASTxE,EATSyE,EAAA,GASFC,EATED,EAAA,YAAAE,IAAA,OAAAA,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAA9F,EAAA+F,KAWhB,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA9F,EAAAmG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,GAEcJ,EAAW,IAAIM,UACZC,OAAO,MAAOjB,EAAKA,EAAInG,KAAKqH,MAAM,YAAYC,OAH/DN,EAAAE,KAAA,EAI0BK,IAAMC,KACpB7B,EACAkB,EACA,CAACY,eAAgB,wBAP7B,OAIcX,EAJdE,EAAAU,KASQ7B,EAAUiB,GATlBE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAWQlB,EAAMkB,EAAAW,IAXd,yBAAAX,EAAAY,SAAAhB,EAAA,kBAXgBiB,MAAAC,KAAAC,WA2CnB,OAjBGC,oBAAU,WACH7B,GAAOA,EAAIhE,MAAQqD,EAClBe,EAAS,kBAELJ,IAAQV,EAAQwC,SAAS9B,EAAIlE,MACjCsE,EAAS,sBAELJ,IAAQV,EAAQwC,SAAS9B,EAAIlE,OAClCkE,EAAIhE,MAAQqD,EACXe,EAAS,yCACHJ,EAGNI,IAFAA,EAAS,iBAId,CAACJ,IAGAxF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,QAAS,EACtCC,SAAU,SAACT,GACPA,EAAEU,iBA9CE,WAAAqF,EAAAqB,MAAAC,KAAAC,WA+CJG,KAGJvH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMO,MAAI,EAACL,UAAWI,IAAWE,GAAI,GACjCC,GAAG,MAAMvB,KAAK,MAAMwB,MAAM,QAC1BC,SAAU,SAAChB,GAAD,OAAK2F,EAAO3F,EAAE0H,OAAOC,MAAM,KACrCA,MAAO,CAACjC,GACRlE,KAAK,OACLL,WAAYC,EACZA,MAAOC,QAAQD,KAEnBlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,GAAIN,UAAWgB,IAC1BC,KAAK,SAASC,SAAUJ,QAAQD,GAChCM,KAAK,SAFT,UAAAkG,OAIezC,EAJf,YA4CG0C,MA7Bf,SAAmB5I,GAAM,IACdkG,EAAsClG,EAAtCkG,YAAatC,EAAyB5D,EAAzB4D,YAAgBiF,EADftE,OAAAuE,EAAA,EAAAvE,CACwBvE,EADxB,+BAGrB,OACIiB,EAAAC,EAAAC,cAAC0C,EAAA,EAAWD,EACR3C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAajC,GAAG,oBAAhB,UAAA8G,OACezC,EADf,WAGAjF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACI9C,EAAAC,EAAAC,cAAC6E,EAADzB,OAAAC,OAAA,CACI0B,YAAaA,GACT2C,EACA7I,OCpFlB+I,EAAMC,IAAMC,WAAW,SAACjJ,EAAOkJ,GACjC,OAAOjI,EAAAC,EAAAC,cAACgI,EAAA,EAAD5E,OAAAC,OAAA,GAASxE,EAAT,CAAgBoJ,SAAUF,EAAKG,MAAM,iBAuIjCC,UApIf,SAA4BtJ,GACxB,IAAM0E,EAAWC,cACX8D,EAAS5D,YAAY,SAAAC,GAAK,OAAIA,EAAM2D,SACpCc,EAAa1E,YAAY,SAAAC,GAAK,OAAIA,EAAM0E,SACxCC,EAAe5E,YAAY,SAAAC,GAAK,OAAIA,EAAM2E,eAEhD,OACIxI,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACIpB,EAAAC,EAAAC,cAACsC,EAAA,QAAD,CACIG,YAAa,CACTqB,KAAMsE,IAAeG,IACrBxE,QAAS,kBAAMR,EAASiF,iBAE5BxJ,SAAS,MACTuD,MAAM,kBACNxD,IAAI,kBACJD,QAAO,eAAA2J,EAAArF,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAA9F,EAAA+F,KAAE,SAAAC,EAAA2C,GAAA,IAAAvJ,EAAA,OAAA0G,EAAA9F,EAAAmG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAOlH,EAAPuJ,EAAOvJ,KAAPgH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEKK,IAAMC,KAAK,UAAW,CACxBxH,KAAMA,IAHT,OAKDoE,EAASiF,eACTjF,EAASoF,YAAsB,mBAAAnB,OACRrI,GADQ,8BAAAqI,OAEGrI,KARjCgH,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAWD5C,EAASiF,eACTjF,EAASoF,YAAsB,mBAAAnB,OACRrI,GADQ,2BAAAqI,OAEArI,EAFA,aAAAqI,OAAArB,EAAAW,MAZ9B,yBAAAX,EAAAY,SAAAhB,EAAA,iBAAF,gBAAA6C,GAAA,OAAAH,EAAAzB,MAAAC,KAAAC,YAAA,KAmBXpH,EAAAC,EAAAC,cAACsC,EAAA,QAAD,CACIG,YAAa,CACTqB,KAAMsE,IAAeS,IACrB9E,QAAS,kBAAMR,EAASiF,iBAE5BxJ,SAAS,SACTuD,MAAK,uBAAAiF,OAAyBF,EAAOnI,KAAhC,KACLJ,IAAG,uBAAAyI,OAAyBF,EAAOnI,KAAhC,KACHqD,QAAO,wCAAAgF,OAA0CF,EAAOnI,KAAjD,4BACPiD,WAAYkF,EAAOnI,KACnBL,QAAO,eAAAgK,EAAA1F,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAA9F,EAAA+F,KAAE,SAAAiD,EAAAC,GAAA,IAAA7J,EAAA,OAAA0G,EAAA9F,EAAAmG,KAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,cAAOlH,EAAP6J,EAAO7J,KAAP8J,EAAA7C,KAAA,EAAA6C,EAAA5C,KAAA,EAEKK,IAAMwC,OAAN,WAAA1B,OAAwBF,EAAO5G,KAFpC,OAGD6C,EAASiF,eACTjF,EAASoF,YAAsB,kBAAAnB,OACTrI,GADS,4BAAAqI,OAECrI,KAN/B8J,EAAA5C,KAAA,gBAAA4C,EAAA7C,KAAA,EAAA6C,EAAAnC,GAAAmC,EAAA,SASD1F,EAASiF,eACTjF,EAASoF,YAAsB,kBAAAnB,OACTrI,GADS,yBAAAqI,OAEFrI,EAFE,aAAAqI,OAAAyB,EAAAnC,MAV9B,yBAAAmC,EAAAlC,SAAAgC,EAAA,iBAAF,gBAAAI,GAAA,OAAAL,EAAA9B,MAAAC,KAAAC,YAAA,KAiBXpH,EAAAC,EAAAC,cAACsC,EAAA,QAAD,CACIG,YAAa,CACTqB,KAAMsE,IAAegB,IACrBrF,QAAS,kBAAMR,EAASiF,iBAE5BxJ,SAAS,SACTuD,MAAK,WAAAiF,OAAaF,EAAOnI,KAApB,KACLJ,IAAG,WAAAyI,OAAaF,EAAOnI,KAApB,KACHiD,WAAYkF,EAAOnI,KACnBL,QAAO,eAAAuK,EAAAjG,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAA9F,EAAA+F,KAAE,SAAAwD,EAAAC,GAAA,IAAApK,EAAAC,EAAA,OAAAyG,EAAA9F,EAAAmG,KAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAOlH,EAAPoK,EAAOpK,KAAMC,EAAbmK,EAAanK,QAAboK,EAAApD,KAAA,EAAAoD,EAAAnD,KAAA,EAEKK,IAAMC,KAAN,WAAAa,OAAsBF,EAAO5G,GAA7B,WAA0C,CAC5CvB,KAAMC,IAHT,OAKDmE,EAASiF,eACTjF,EAASoF,YAAsB,kBAAAnB,OACTrI,GADS,4BAAAqI,OAECrI,EAFD,UAAAqI,OAEcpI,KAR5CoK,EAAAnD,KAAA,gBAAAmD,EAAApD,KAAA,EAAAoD,EAAA1C,GAAA0C,EAAA,SAWDjG,EAASiF,eACTjF,EAASoF,YAAsB,kBAAAnB,OACTrI,GADS,yBAAAqI,OAEFrI,EAFE,UAAAqI,OAEWpI,EAFX,aAAAoI,OAAAgC,EAAA1C,MAZ9B,yBAAA0C,EAAAzC,SAAAuC,EAAA,iBAAF,gBAAAG,GAAA,OAAAJ,EAAArC,MAAAC,KAAAC,YAAA,KAmBXpH,EAAAC,EAAAC,cAAC0J,EAAD,CACIjH,YAAa,CACTqB,KAAMsE,IAAeuB,IACrB5F,QAAS,kBAAMR,EAASiF,iBAE5BzD,YAAY,UACZD,WAAU,WAAA0C,OAAaF,EAAO5G,GAApB,QACVsE,UAAW,SAACiB,GACR1C,EAASiF,eACTjF,EAASoF,YACL,uBAD2B,oCAKnC1D,OAAQ,SAAC2E,GACLrG,EAASiF,eACTjF,EAASoF,YACL,uBAD2B,uCAAAnB,OAEYoC,QAInD9J,EAAAC,EAAAC,cAACsC,EAAA,QAAD,CACItD,SAAS,eACTuD,MAAO+F,EAAa/F,MACpBC,QAAS8F,EAAa9F,QACtBC,YAAa,CACTqB,KAA6B,KAAvBwE,EAAa/F,OAAyC,KAAzB+F,EAAa9F,QAChDuB,QAAS,kBAAIR,EAASsG,mBAG9B/J,EAAAC,EAAAC,cAAC8J,EAAD,MACAhK,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAK5J,UAAWyH,EAAKoC,SAAS,QAC1BC,OAAQ,GAAIC,MAAO,GAAIC,OAAQ,GAC/B9F,QAAS,kBAAId,EAAS6G,iBAEtBtK,EAAAC,EAAAC,cAACqK,EAAA,EAAD","file":"static/js/23.06281855.chunk.js","sourcesContent":["import React from 'react';\r\nimport {TextField, Button, Grid} from '@material-ui/core';\r\n\r\nfunction DialogCustomForm(props){\r\n    const {\r\n        request, \r\n        btn,\r\n        category,\r\n\t\tvalues: { name, newName, confirmName },\r\n\t\terrors,\r\n\t\ttouched,\r\n\t\thandleChange,\r\n\t\tisValid,\r\n\t\tsetFieldTouched\r\n    } = props;\r\n    \r\n    const change = (name, e) => {\r\n\t\te.persist();\r\n\t\thandleChange(e);\r\n\t\tsetFieldTouched(name, true, false);\r\n    };\r\n\r\n\treturn(\r\n        <Grid container component=\"form\" spacing={1}\r\n            onSubmit={(e)=>{\r\n                e.preventDefault();\r\n                request({ \r\n                    name: name, \r\n                    newName: newName, \r\n                    confirmName: confirmName \r\n                });\r\n            }}\r\n        >\r\n            {category === 'add' \r\n                ? <Grid component={TextField} item xs={12}\r\n                    id=\"name\" name=\"name\" label=\"Name\"\r\n                    onChange={change.bind(null, \"name\")}\r\n                    value={name}\r\n                    helperText={touched.name ? errors.name : \"\"}\r\n                    error={touched.name && Boolean(errors.name)}\r\n                /> : category === 'delete'\r\n                ? <Grid component={TextField} item xs={12}\r\n                    id=\"confirmName\" name=\"confirmName\" label=\"Confirm Name\"\r\n                    onChange={change.bind(null, \"confirmName\")}\r\n                    value={confirmName}\r\n                    helperText={touched.confirmName ? errors.confirmName : \"\"}\r\n                    error={touched.confirmName && Boolean(errors.confirmName)}\r\n                /> : category === 'rename'\r\n                ? <React.Fragment>\r\n                    <Grid component={TextField} item xs={12}\r\n                        id=\"newName\" name=\"newName\" label=\"New Name\"\r\n                        onChange={change.bind(null, \"newName\")}\r\n                        value={newName}\r\n                        helperText={touched.newName ? errors.newName : \"\"}\r\n                        error={touched.newName && Boolean(errors.newName)}\r\n                    />\r\n                    <Grid component={TextField} item xs={12}\r\n                        id=\"confirmName\" name=\"confirmName\" label=\"Confirm Name\"\r\n                        onChange={change.bind(null, \"confirmName\")}\r\n                        value={confirmName}\r\n                        helperText={touched.confirmName ? errors.confirmName : \"\"}\r\n                        error={touched.confirmName && Boolean(errors.confirmName)}\r\n                    />\r\n                </React.Fragment> : null\r\n            }\r\n            <Grid item xs={12} component={Button} \r\n                type=\"submit\" disabled={!isValid}\r\n                size=\"large\"\r\n            >\r\n                {btn}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default DialogCustomForm;","import React from 'react';\r\nimport {Dialog, DialogTitle, DialogContent, DialogContentText} from '@material-ui/core';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport DialogCustomForm from './DialogCustomForm';\r\n\r\nconst addSchema = Yup.object({\r\n\tname: Yup.string().required('enter name')\r\n\t.matches(/^[a-zA-Z0-9_]+$/, {\r\n\t\tmessage: 'input letters, numbers, and underscore only',\r\n\t\texcludeEmptyString: true,\r\n\t}).min(1, 'name too short').max(50, 'name too long')\r\n});\r\n\r\nconst deleteSchema = Yup.object({\r\n    name: Yup.string(),\r\n\tconfirmName: Yup.string().required('re-enter name')\r\n\t.matches(/^[a-z0-9_]*$/i, {\r\n\t\tmessage: 'input letters, numbers, and underscore only',\r\n\t\texcludeEmptyString: true,\r\n\t}).oneOf([Yup.ref('name')], \"Confirm Name does not match\")\r\n});\r\n\r\nconst renameSchema = Yup.object({\r\n    name: Yup.string(),\r\n\tconfirmName: Yup.string().required('re-enter name')\r\n\t.oneOf([Yup.ref('name')], \"Confirm Name does not match\"),\r\n    newName: Yup.string().required('enter new name')\r\n\t.matches(/^[a-zA-Z0-9_]+$/, {\r\n\t\tmessage: 'input letters, numbers, and underscore only',\r\n\t\texcludeEmptyString: true,\r\n    }).min(1, 'new name too short').max(50, 'new name too long')\r\n});\r\n\r\nconst initialAdd = {\r\n    name: ''\r\n};\r\n\r\nconst initialDelete = targetName => ({\r\n    name: targetName,\r\n    confirmName: ''\r\n});\r\n\r\nconst initialRename = targetName => ({\r\n    name: targetName,\r\n    confirmName: '',\r\n    newName: ''\r\n});\r\n\r\n// will accept parameter of request, title, content, btn, targetName, and dialogProps\r\nfunction DialogCustom(props){\r\n    const {title, content, targetName, category, dialogProps} = props;\r\n\r\n    return(\r\n        <Dialog {...dialogProps}>\r\n            <DialogTitle id='dialog-title'>\r\n                {title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {category === 'add' || category === 'delete' || category === 'rename' \r\n                    ? <React.Fragment>\r\n                        {category === 'delete' \r\n                            ?   <React.Fragment>\r\n                                    <DialogContentText>\r\n                                        {content}\r\n                                    </DialogContentText>\r\n                                    <DialogContentText>\r\n                                        Please type in the name of the target to confirm\r\n                                    </DialogContentText>\r\n                                </React.Fragment>\r\n                            : null\r\n                        }\r\n                        <Formik \r\n                            validationSchema={category === 'add'\r\n                                ? addSchema : category === 'rename'\r\n                                ? renameSchema : category === 'delete'\r\n                                ? deleteSchema : {}\r\n                            }\r\n                            initialValues={category === 'add'\r\n                                ? initialAdd : category === 'rename'\r\n                                ? initialRename(targetName) : category === 'delete'\r\n                                ? initialDelete(targetName) : {}\r\n                            }\r\n                            render={(propsRender)=><DialogCustomForm \r\n                                {...props}\r\n                                {...propsRender}\r\n                            />}\r\n                        />\r\n                    </React.Fragment> : category === 'notification'\r\n                    ? <DialogContentText>\r\n                        {content}\r\n                    </DialogContentText> : null\r\n                }\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nDialogCustom.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    content: PropTypes.string,\r\n    btn: PropTypes.string,\r\n    targetName: PropTypes.string,\r\n    category: PropTypes.oneOf(['add', 'delete', 'rename', 'notification']).isRequired,\r\n    request: PropTypes.func,\r\n    dialogProps: PropTypes.shape({\r\n        ...Dialog.propTypes\r\n    }).isRequired\r\n}\r\n\r\nexport default DialogCustom;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {SetProjectPopover} from '../redux/actions/projectActions';\r\nimport {ShowRenameDialog, ShowDeleteDialog, ShowImgDialog} from '../redux/actions/globalActions';\r\nimport {DeleteForever, Create, Image} from '@material-ui/icons'\r\nimport PopoverMenu from './PopoverMenu';\r\n\r\nfunction OverviewPopover(props){\r\n    const dispatch = useDispatch();\r\n    const anchor = useSelector(state=>state.projectPopover);\r\n\r\n    return(\r\n        <PopoverMenu\r\n            id={anchor ? 'Project Menu' : null}\r\n            open={anchor ? true : false}\r\n            onClose={() => dispatch(SetProjectPopover(null))}\r\n            anchorEl={anchor}\r\n            menus={[\r\n                {\r\n                    title: \"Rename\",\r\n                    icon: Create,\r\n                    onClick: () => {\r\n                        dispatch(SetProjectPopover(null));\r\n                        dispatch(ShowRenameDialog());\r\n                    }\r\n                },\r\n                {\r\n                    title: \"Change Image\",\r\n                    icon: Image,\r\n                    onClick: () => {\r\n                        dispatch(SetProjectPopover(null));\r\n                        dispatch(ShowImgDialog());\r\n                    }\r\n                },\r\n                {\r\n                    title: \"Delete\",\r\n                    icon: DeleteForever,\r\n                    onClick: () => {\r\n                        dispatch(SetProjectPopover(null));\r\n                        dispatch(ShowDeleteDialog());\r\n                    }\r\n                }\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default OverviewPopover;","import React, {useState, useEffect} from 'react';\r\nimport {Dialog, DialogTitle, DialogContent, TextField, Button, Grid} from '@material-ui/core';\r\nimport Axios from '../Axios';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst maxSize = 10 * 1024 * 1024;\r\nconst formats = [\r\n    \"image/jpg\",\r\n    \"image/jpeg\",\r\n    \"image/png\"\r\n];\r\n\r\nfunction Form(props){\r\n    const {\r\n        imgRequest, \r\n        imgCategory,\r\n        onSucceed,\r\n        onFail\r\n    } = props;\r\n\r\n    const [img, setImg] = useState();\r\n    const [error, setError] = useState();\r\n    \r\n    async function imgReq(){\r\n        try{\r\n            const formdata = new FormData();\r\n            formdata.append('img', img, img.name.split(/(\\\\|\\/)/g).pop());\r\n            const res = await Axios.post(\r\n                imgRequest, \r\n                formdata,\r\n                {'Content-Type': 'multipart/form-data'}\r\n            );\r\n            onSucceed(res);\r\n        }catch(err){\r\n            onFail(err);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(img && img.size >= maxSize){\r\n            setError(\"File too large\");\r\n        }\r\n        else if(img && !formats.includes(img.type)){\r\n            setError(\"Unsupported Format\");\r\n        }\r\n        else if(img && !formats.includes(img.type) \r\n        && img.size >= maxSize){\r\n            setError(\"Unsupported Format and File too large\");\r\n        }else if(!img){\r\n            setError(\"Upload Image\");\r\n        }else{\r\n            setError();\r\n        }\r\n    }, [img]);\r\n\r\n\treturn(\r\n        <Grid container component=\"form\" spacing={1}\r\n            onSubmit={(e)=>{\r\n                e.preventDefault();\r\n                imgReq();\r\n            }}\r\n        >\r\n            <Grid item component={TextField} xs={12}\r\n                id=\"img\" name=\"img\" label=\"Image\"\r\n                onChange={(e)=>setImg(e.target.files[0])}\r\n                files={[img]}\r\n                type='file'\r\n                helperText={error}\r\n                error={Boolean(error)}\r\n            />\r\n            <Grid item xs={12} component={Button} \r\n                type=\"submit\" disabled={Boolean(error)}\r\n                size=\"large\"\r\n            >\r\n                {`Change ${imgCategory} Image`}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// will accept parameter of imgRequest, imgCategory, and dialogProps\r\n// imgCategory is category of item that will be added\r\n// imgCategory will affect content of title and body\r\n// imgRequest will be needed when sending add request\r\n// DialogAdd will be used for change img of project\r\nfunction DialogImg(props){\r\n    const {imgCategory, dialogProps, ...other} = props;\r\n\r\n    return(\r\n        <Dialog {...dialogProps}>\r\n            <DialogTitle id='dialog-img-title'>\r\n                {`Change ${imgCategory} Image`}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Form \r\n                    imgCategory={imgCategory}\r\n                    {...other}\r\n                    {...props}\r\n                />\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nDialogImg.propTypes = {\r\n    imgRequest: PropTypes.string.isRequired,\r\n    imgCategory: PropTypes.string.isRequired,\r\n    onSucceed: PropTypes.func.isRequired,\r\n    onFail: PropTypes.func.isRequired,\r\n    dialogProps: PropTypes.shape({\r\n        ...Dialog.propTypes\r\n    }).isRequired\r\n}\r\n\r\nexport default DialogImg;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {Fab, Box} from '@material-ui/core';\r\nimport {Add} from '@material-ui/icons';\r\nimport { ADD_DIALOG, DELETE_DIALOG, RENAME_DIALOG, IMG_DIALOG\r\n    , HideDialog, ShowAddDialog, ShowNotificationDialog\r\n    , HideNotificationDialog } from '../redux/actions/globalActions';\r\nimport OverviewPopover from './OverviewPopover';\r\nimport DialogCustom from './DialogCustom';\r\nimport DialogImg from './DialogImg';\r\n\r\nimport Axios from '../Axios';\r\n\r\nconst FAB = React.forwardRef((props, ref)=>{\r\n    return <Fab {...props} innerRef={ref} color=\"secondary\"/>\r\n});\r\n\r\nfunction OverviewAuthorized(props){\r\n    const dispatch = useDispatch();\r\n    const target = useSelector(state => state.target);\r\n    const dialogType = useSelector(state => state.dialog);\r\n    const notification = useSelector(state => state.notification);\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <DialogCustom\r\n                dialogProps={{\r\n                    open: dialogType === ADD_DIALOG,\r\n                    onClose: () => dispatch(HideDialog())\r\n                }}\r\n                category=\"add\"\r\n                title=\"Add New Project\"\r\n                btn=\"Add New Project\"\r\n                request={async({name})=>{\r\n                    try{\r\n                        await Axios.post(\"project\", {\r\n                            name: name\r\n                        });\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Add New Project ${name}`, \r\n                            `Succeed adding new project ${name}`\r\n                        ));\r\n                    }catch(err){\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Add New Project ${name}`, \r\n                            `Fail adding new project ${name}, error: ${err}`\r\n                        ));\r\n                    }\r\n                }}\r\n            />\r\n            <DialogCustom\r\n                dialogProps={{\r\n                    open: dialogType === DELETE_DIALOG,\r\n                    onClose: () => dispatch(HideDialog())\r\n                }}\r\n                category=\"delete\"\r\n                title={`PERMANENTLY DELETE \"${target.name}\"`}\r\n                btn={`PERMANENTLY DELETE \"${target.name}\"`}\r\n                content={`This action will PERMANENTLY DELETE \"${target.name}\". Proceed with caution!`}\r\n                targetName={target.name}\r\n                request={async({name})=>{\r\n                    try{\r\n                        await Axios.delete(`project/${target.id}`);\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Delete Project ${name}`, \r\n                            `Succeed deleting project ${name}`\r\n                        ));\r\n                    }catch(err){\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Delete Project ${name}`, \r\n                            `Fail deleting project ${name}, error: ${err}`\r\n                        ));\r\n                    }\r\n                }}\r\n            />\r\n            <DialogCustom\r\n                dialogProps={{\r\n                    open: dialogType === RENAME_DIALOG,\r\n                    onClose: () => dispatch(HideDialog())\r\n                }}\r\n                category=\"rename\"\r\n                title={`Rename \"${target.name}\"`}\r\n                btn={`Rename \"${target.name}\"`}\r\n                targetName={target.name}\r\n                request={async({name, newName})=>{\r\n                    try{\r\n                        await Axios.post(`project/${target.id}/rename`, {\r\n                            name: newName\r\n                        });\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Rename Project ${name}`, \r\n                            `Succeed renaming project ${name} into ${newName}`\r\n                        ));\r\n                    }catch(err){\r\n                        dispatch(HideDialog());\r\n                        dispatch(ShowNotificationDialog(\r\n                            `Rename Project ${name}`, \r\n                            `Fail renaming project ${name} into ${newName}, error: ${err}`\r\n                        ));\r\n                    }\r\n                }}\r\n            />\r\n            <DialogImg\r\n                dialogProps={{\r\n                    open: dialogType === IMG_DIALOG,\r\n                    onClose: () => dispatch(HideDialog())\r\n                }}\r\n                imgCategory=\"Project\"\r\n                imgRequest={`project/${target.id}/img`}\r\n                onSucceed={(res) => {\r\n                    dispatch(HideDialog());\r\n                    dispatch(ShowNotificationDialog(\r\n                        'Change Project Image', \r\n                        `Succeed changing project image`\r\n                    ));\r\n                }}\r\n                onFail={(err) => { \r\n                    dispatch(HideDialog());\r\n                    dispatch(ShowNotificationDialog(\r\n                        'Change Project Image', \r\n                        `Fail changing project image, error: ${err}`\r\n                    ));\r\n                }}\r\n            />\r\n            <DialogCustom\r\n                category=\"notification\"\r\n                title={notification.title} \r\n                content={notification.content}\r\n                dialogProps={{\r\n                    open: notification.title !== '' && notification.content !== '',\r\n                    onClose: ()=>dispatch(HideNotificationDialog())\r\n                }}\r\n            />\r\n            <OverviewPopover/>\r\n            <Box component={FAB} position=\"fixed\" \r\n                bottom={30} right={30} zIndex={50}\r\n                onClick={()=>dispatch(ShowAddDialog())}\r\n            >\r\n                <Add/>\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default OverviewAuthorized;"],"sourceRoot":""}