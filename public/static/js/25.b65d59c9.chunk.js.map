{"version":3,"sources":["../node_modules/@material-ui/icons/esm/Add.js","components/Project.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_utils_createSvgIcon__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","Object","a","createElement","d","ProjectAuthorized","lazy","Promise","all","e","then","bind","columns","title","field","searchable","hidden","export","render","rowData","name","projectName","react__WEBPACK_IMPORTED_MODULE_1___default","react_router_dom__WEBPACK_IMPORTED_MODULE_14__","style","color","to","concat","type","Project","props","dispatch","useDispatch","project","match","params","status","useSelector","state","authStatus","_useState","useState","_useState2","D_Project_VScode_Web_StarfallCMS_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","authorized","setAuthorized","select","useMemo","selectEntitiesInProjectByName","entities","_useState3","_useState4","datas","setDatas","useEffect","CREATOR","MANAGER","map","value","index","#","id","createdAt","created","updatedAt","updated","Fragment","material_table__WEBPACK_IMPORTED_MODULE_3___default","data","actions","icon","_material_ui_icons__WEBPACK_IMPORTED_MODULE_4__","tooltip","onClick","SetTarget","ShowRenameDialog","_material_ui_icons__WEBPACK_IMPORTED_MODULE_5__","ShowDeleteDialog","_material_ui_icons__WEBPACK_IMPORTED_MODULE_6__","isFreeAction","ShowAddDialog","icons","Search","ResetSearch","Clear","FirstPage","PreviousPage","ArrowBack","NextPage","ArrowForward","LastPage","options","pageSize","pageSizeOptions","search","actionsColumnIndex"],"mappings":"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","file":"static/js/25.b65d59c9.chunk.js","sourcesContent":["import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import React, {useState, useEffect, useMemo, lazy} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport MaterialTable from 'material-table';\r\nimport {Search, Clear, ArrowForward, ArrowBack, FirstPage, LastPage, DeleteForever, Create, Add} from '@material-ui/icons'\r\nimport {CREATOR, MANAGER} from '../redux/actions/authorizationActions';\r\nimport {Link} from 'react-router-dom';\r\nimport {selectEntitiesInProjectByName} from '../redux/selectors/entitySelectors';\r\n\r\nimport {ShowAddDialog, ShowDeleteDialog, ShowRenameDialog\r\n    , SetTarget} from '../redux/actions/globalActions';\r\n\r\nconst ProjectAuthorized = lazy(() => import('./ProjectAuthorized'));\r\n\r\nconst columns = [\r\n    {\r\n        title: \"#\", \r\n        field: \"#\", \r\n        searchable: false\r\n    },\r\n    {\r\n        field: \"id\", \r\n        searchable: false, \r\n        hidden: true, \r\n        export: false\r\n    },\r\n    {\r\n        field: \"projectName\", \r\n        searchable: false, \r\n        hidden: true, \r\n        export: false\r\n    },\r\n    {\r\n        title: \"Name\", \r\n        field: \"name\", \r\n        searchable: true, \r\n        render: (rowData)=>{\r\n            const {name, projectName} = rowData;\r\n            return(\r\n                <Link style={{color: 'black'}} to={`/${projectName}/${name}`}>\r\n                    {name}\r\n                </Link>\r\n            )\r\n        }\r\n    },\r\n    {\r\n        title: \"Created At\", \r\n        field: \"createdAt\", \r\n        searchable: false,\r\n        type: 'datetime'\r\n    },\r\n    {   \r\n        title: \"Updated At\", \r\n        field: \"updatedAt\", \r\n        searchable: false,\r\n        type: 'datetime'\r\n    }\r\n]\r\n\r\n// fetch authStatus from redux store and setAuthorized(true) if creator or manager\r\n// Any actions in Project will affect Entity and need Creator or Manager level Authorization\r\nfunction Project(props){\r\n    const dispatch = useDispatch();\r\n    const {project} = props.match.params;\r\n    \r\n    const status = useSelector(state=>state.authStatus);\r\n    const [authorized, setAuthorized] = useState(false);\r\n\r\n    const select = useMemo(selectEntitiesInProjectByName, []);\r\n    const entities = useSelector(state => select(state, project));\r\n\r\n    const [datas, setDatas] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        if(status === CREATOR || status === MANAGER) setAuthorized(true);\r\n        else setAuthorized(false);\r\n    }, [status]);\r\n\r\n    useEffect(()=>{\r\n        setDatas(entities.entities.map((value, index) => ({\r\n            \"#\": (index+1),\r\n            id: value.id,\r\n            projectName: project,\r\n            name: value.name,\r\n            createdAt: value.created,\r\n            updatedAt: value.updated\r\n        })));\r\n    }, [entities]);\r\n\r\n    // view all entities within project and their attribute\r\n    // entity id\r\n    // entity name\r\n    // entity last modified\r\n    // how many items\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {authorized ? <ProjectAuthorized/> : null}\r\n            <MaterialTable \r\n                title=\"Entities\" \r\n                columns={columns} \r\n                data={datas}\r\n                actions={authorized ? [\r\n                    {\r\n                        icon: ()=><Create/>, \r\n                        tooltip: \"Rename Entity\", \r\n                        onClick: (e, rowData)=>{\r\n                            const {id, name} = rowData;\r\n                            dispatch(SetTarget({id: id, name: name}));\r\n                            dispatch(ShowRenameDialog());\r\n                        }\r\n                    },\r\n                    {\r\n                        icon: ()=><DeleteForever/>, \r\n                        tooltip: \"Delete Entity\",\r\n                        onClick: (e, rowData)=>{\r\n                            const {id, name} = rowData;\r\n                            dispatch(SetTarget({id: id, name: name}));\r\n                            dispatch(ShowDeleteDialog());\r\n                        }\r\n                    },\r\n                    {\r\n                        icon: ()=><Add/>,\r\n                        tooltip: \"Add Entity\",\r\n                        isFreeAction: true,\r\n                        onClick: (e)=>{\r\n                            dispatch(SetTarget({id: entities.project.id}));\r\n                            dispatch(ShowAddDialog());\r\n                        }\r\n                    }\r\n                ]: []}\r\n                icons={{\r\n                    Search: Search,\r\n                    ResetSearch: Clear,\r\n                    FirstPage: FirstPage,\r\n                    PreviousPage: ArrowBack,\r\n                    NextPage: ArrowForward,\r\n                    LastPage: LastPage\r\n                }}\r\n                options={{\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10,25,50],\r\n                    search: true,\r\n                    actionsColumnIndex: -1\r\n                }}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Project;"],"sourceRoot":""}